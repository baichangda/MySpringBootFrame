buildscript {
    ext {
        springBootVersion = '+'
        kafkaVersion = '+'
        flywayVersion = '+'
        mavenRepoUrl='https://maven.aliyun.com/repository/central'
        incarMavenRepoUrl='https://repository.incarcloud.com/content/repositories/snapshots/'
    }

    repositories {
        mavenLocal()
        maven { url "${mavenRepoUrl}" }
//        mavenCentral()
    }

    dependencies {
        //使用springboot框架
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        //使用flyway插件
        classpath "org.flywaydb:flyway-gradle-plugin:${flywayVersion}"
    }
}

//所有模块配置
allprojects{
    group 'com.bcd'
    version '1.0-SNAPSHOT'
    apply plugin: 'java'
    apply plugin: 'idea'
    //加入maven发布依赖
    apply plugin: 'maven-publish'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        maven { url "${mavenRepoUrl}" }
//        maven { url "${incarMavenRepoUrl}" }
//        mavenCentral()
    }

    //下载源码和文档
    //gradle cleanIdea idea
    idea {
        module {
            downloadSources=true
//            downloadJavadoc=true
        }
    }
    dependencies{
        //springboot kafka支持
        compile("org.springframework.kafka:spring-kafka:${kafkaVersion}")
        //邮件支持
        compile("org.springframework.boot:spring-boot-starter-mail:${springBootVersion}")
    }

    //生成jar时打包源码
    task sourceJar(type: Jar) {
        from sourceSets.main.java.srcDirs
        classifier "sources"
    }

    jar {
        enabled = true
    }

    //发布到本地MAVEN仓库使用 gradle PublishToMavenLocal
    //发布到远程MAVEN仓库使用 gradle publishMavenPublicationToMavenRepository
    publishing{
        publications {
            maven(MavenPublication){
                from components.java
                artifact(sourceJar)
            }
        }
        repositories {
            maven{
                url 'https://repository.incarcloud.com/content/repositories/snapshots/'
                credentials {
                    username 'deployment'
                    password 'deploy123456'
                }
            }
        }
    }
}

apply plugin: 'org.flywaydb.flyway'
apply plugin: 'org.springframework.boot'

/**
 * SpringBoot 2开始,使用gradle bootJar进行打包,并要配置入口类
 */
bootJar {
    manifest {
        attributes 'Start-Class': 'com.bcd.Application'
    }
}

flyway {
    url = 'jdbc:mysql://127.0.0.1:3306/msbf?characterEncoding=utf8&useSSL=false&rewriteBatchedStatements=true&serverTimezone=UTC'
    user = 'root'
    password = '123456'
    def subLocations=[]
    for(project in subprojects){
        subLocations.add('filesystem:'+project.sourceSets.main.resources.srcDirs.iterator().next().getPath()+'/db/migration')
    }
    flyway.locations =subLocations
}

flywayMigrate {
    outOfOrder=true
}

bootRun {
    /**
     * 启动时候带入jvm的参数;如下(启动jvisualvm监控)
     * nohup gradle bootRun -PjvmArgs="-Djava.rmi.server.hostname=172.16.24.36 -Dcom.sun.management.jmxremote.port=10001 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true" &
     */
    List args=new ArrayList<>();
    if (project.hasProperty('jvmArgs')) {
        args.addAll(project.jvmArgs.split("\\s+") as List)
    }
    //开启缓存行补齐
    args.add('-XX:-RestrictContended')
    args.add('-Dfile.encoding=UTF-8')

    jvmArgs(args)
}

dependencies {
    compile project(':Sys')
    compile project(':MongoDB')
}
