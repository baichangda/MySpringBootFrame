buildscript {
    ext {
        aliyunPublic = 'https://maven.aliyun.com/repository/public/'
        incarMavenRepoUrl = 'https://repository.incarcloud.com/content/repositories/snapshots/'
    }

    repositories {
        mavenLocal()
        maven { url "${aliyunPublic}" }
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'java'
    id 'idea'
    id 'maven-publish'
    id "io.spring.dependency-management" version "1.1.2"
    id 'org.springframework.boot' version "3.+"
}


/**
 * ----------------------------------------------------------------------------
 */
group 'com.bcd'
version '1.0-SNAPSHOT'

sourceCompatibility = 21
targetCompatibility = 21

repositories {
    mavenLocal()
    maven { url "${aliyunPublic}" }
    mavenCentral()
//    maven {
//        url "${incarMavenRepoUrl}"
//        //允许http依赖库
//        allowInsecureProtocol = true
//    }
}

//下载源码和文档
//gradle cleanIdea idea
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}


configurations.all {
    //去除springboot默认的logback
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    exclude module: 'logback-classic'
    exclude module: 'logback-core'

    //指定快照jar的更新策略
    resolutionStrategy {
        //缓存依赖时间、0代表不缓存
        cacheChangingModulesFor 0, 'seconds'
    }
}

dependencies {
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: "+"
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "+"

    // https://mvnrepository.com/artifact/com.google.code.findbugs/annotations
//    implementation group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'

    // https://mvnrepository.com/artifact/com.github.spotbugs/spotbugs-annotations
//    implementation group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '4.7.3'

    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation group: 'com.google.guava', name: 'guava', version: "+"

    //springboot支持
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-configuration-processor")
    //springboot cache支持
    implementation("org.springframework.boot:spring-boot-starter-cache")
    //springboot aop支持
    implementation("org.springframework.boot:spring-boot-starter-aop")
    //springboot web支持
    implementation("org.springframework.boot:spring-boot-starter-web")


    //springboot log4j2支持
    implementation('org.springframework.boot:spring-boot-starter-log4j2')
    //disruptor(log4j2异步日志需要用到)
    implementation group: 'com.lmax', name: 'disruptor', version: "3.+"

    //springboot jdbc支持
    implementation("org.springframework.boot:spring-boot-starter-data-jdbc")
    //邮件支持
    implementation("org.springframework.boot:spring-boot-starter-mail")

    //springboot redis支持
    //lettuce异步客户端(默认使用lettuce)
    implementation("org.springframework.boot:spring-boot-starter-data-redis")
    //springboot validation支持
    implementation("org.springframework.boot:spring-boot-starter-validation")

    //springboot mongodb支持
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")

    //spring kafka支持
    implementation group: 'org.springframework.kafka', name: 'spring-kafka', version: "3.+"

    // https://mvnrepository.com/artifact/com.alibaba/easyexcel
    implementation(group: 'com.alibaba', name: 'easyexcel', version: "+")
//            {
//        exclude group: 'org.apache.poi' ,module: 'poi-ooxml-schemas'
//    }
    // https://mvnrepository.com/artifact/org.apache.xmlbeans/xmlbeans
//    implementation group: 'org.apache.xmlbeans', name: 'xmlbeans', version: '5.0.3'


    // https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-openapi3-jakarta-spring-boot-starter
    implementation group: 'com.github.xiaoymin', name: 'knife4j-openapi3-jakarta-spring-boot-starter', version: "+"


    // https://mvnrepository.com/artifact/com.github.ben-manes.caffeine/caffeine
    implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: "3.+"

    // https://mvnrepository.com/artifact/org.freemarker/freemarker
    implementation group: 'org.freemarker', name: 'freemarker', version: "+"


    //mysql驱动包
    runtimeOnly "mysql:mysql-connector-java:8.+"
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    runtimeOnly group: 'org.postgresql', name: 'postgresql', version: "42.+"


    testImplementation("org.springframework.boot:spring-boot-starter-test")

    // https://mvnrepository.com/artifact/cn.dev33/sa-token-spring-boot-starter
    implementation group: 'cn.dev33', name: 'sa-token-spring-boot3-starter', version: "+"
    implementation group: 'cn.dev33', name: 'sa-token-redis-jackson', version: "+"

    // define a BOM and its version
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp-bom
    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.11.0"))
    // define any required OkHttp artifacts without version
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")

//    // https://mvnrepository.com/artifact/com.squareup.okhttp3/logging-interceptor
//    implementation group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: '3.14.9'
//    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
//    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.14.9'


    // https://mvnrepository.com/artifact/com.github.oshi/oshi-core
    implementation group: 'com.github.oshi', name: 'oshi-core', version: "+"
}

//把classpath添加到module path中、建立module-info.java后使用
//compileJava {
//    doFirst {
//        options.compilerArgs += [
//                '--module-path', classpath.asPath
//        ]
//        classpath = files()
//    }
//}

/**
 * SpringBoot 2开始,使用gradle bootJar进行打包,并要配置入口类
 */
bootJar {
    exclude "**/*-dev.yml"
    exclude "**/*-test.yml"
    manifest {
        attributes 'Start-Class': 'com.bcd.Application'
    }
    //指定jar文件的名称
    archiveBaseName = "${rootProject.name}"
    version = ''
}

//生成jar时打包源码
task sourceJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

/**
 * ----------------------------------------------------------------------------
 */
bootRun {
    /**
     * 启动时候带入jvm的参数;如下(启动jvisualvm监控)
     * nohup gradle bootRun -PjvmArgs="-Djava.rmi.server.hostname=172.16.24.36 -Dcom.sun.management.jmxremote.port=10001 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true" &
     */
    if (project.hasProperty('jvmArgs')) {
        jvmArgs(project.jvmArgs.split("\\s+") as List)
    }
    //这些参数在bootJar中不会生效、如果需要添加、则在java -jar后面加上、必须紧接着-jar
    //开启缓存行补齐
    jvmArgs('-XX:-RestrictContended')
    jvmArgs('-Dfile.encoding=UTF-8')
    jvmArgs('-Dsun.jnu.encoding=UTF-8')
    jvmArgs('-DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector')
}


/**
 * ----------------------------------------------------------------------------
 */

//发布到本地MAVEN仓库使用 gradle PublishToMavenLocal
//发布到远程MAVEN仓库使用 gradle publishMavenPublicationToMavenRepository
//注意如果发布snapshots、version需要带-SNAPSHOT、version可以重复、如果重复会append不会覆盖
//注意如果发布releases、version不需要带后缀、version不可以重复
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact(sourceJar)
        }
    }
    repositories {
        maven {
            url 'https://repository.incarcloud.com/content/repositories/snapshots/'
            credentials {
                username 'deployment'
                password 'deploy123456'
            }
        }
    }
}


/**
 * 如果jar包依赖中有platform、则需要如下任务
 * 或者使用如下方式、不需要任务
 * dependencyManagement{
 *      imports{
 *          mavenBom ""
 *      }
 * }
 */
import java.util.regex.Matcher

tasks.withType(GenerateMavenPom).all {
    doLast {
        File file = new File("$buildDir/publications/maven/pom-default.xml")
        def text = file.text
        def pattern = "(?s)(<dependencyManagement>.+?<dependencies>)(.+?)(</dependencies>.+?</dependencyManagement>)"
        Matcher matcher = text =~ pattern
        if (matcher.find()) {
            text = text.replaceFirst(pattern, "")
            def firstDeps = matcher.group(2)
            text = text.replaceFirst(pattern, '$1$2' + firstDeps + '$3')
        }
        file.write(text)
    }
}


/**
 * 如果需要打jar包供其他人使用、需要排除log4j2.xml配置文件、防止冲突
 * 如果是作为应用启动、则不需要此配置
 */
//sourceSets {
//    main {
//        resources {
//            srcDir 'src/main/resources'
//            exclude 'log4j2.xml'
//        }
//    }
//}


///**
// * gradle bootJar分离源代码和lib配置
// */
//// 将依赖包复制到lib目录
//task copyJar(type: Copy) {
//    delete "$buildDir\\libs\\lib"
//    from configurations.compileClasspath,configurations.runtimeClasspath
//    into "$buildDir\\libs\\lib"
//}
//bootJar {
//    // 例外所有的jar
//    excludes = ["*.jar"]
//    // lib目录的清除和复制任务
//    dependsOn copyJar
//
//    //获取compile jar、runtime jar、写入到MANIFEST.MF文件
//    def temp=[]
//    temp.addAll(configurations.compileClasspath.files)
//    temp.addAll(configurations.runtimeClasspath.files)
//
//    // 指定依赖包的路径
//    manifest {
//        attributes 'Start-Class': 'com.incarcloud.Application'
//        attributes "Manifest-Version": 1.0,
//                'Class-Path': temp.collect { "lib/$it.name" }.join(' ')
//    }
//}