buildscript {
    ext {
        mysqlVersion = '8.+'
        pgsqlVersion = '42.2.+'
        jsqlparserVersion = '+'
        druidVersion = '+'
        freemarkerVersion = '+'
        easyexcelVersion = '+'
        commonsPool2 = '+'
        shiroVersion = '+'
        disruptorVersion = '+'
        springdocVersion = '+'
        caffeineVersion = '+'
        retrofitJacksonVersion = '+'
        springBootVersion = '+'
        kafkaVersion = '+'
        flywayVersion = '7.3.+'
        lombokVersion = "+"
        mavenRepoUrl = 'https://maven.aliyun.com/repository/central'
//        incarMavenRepoUrl='https://repository.incarcloud.com/content/repositories/snapshots/'
    }

    repositories {
        mavenLocal()
        maven { url "${mavenRepoUrl}" }
    }

    dependencies {
        //使用springboot框架
        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: "${springBootVersion}"
        //使用flyway插件
        classpath group: 'org.flywaydb', name: 'flyway-gradle-plugin', version: "${flywayVersion}"
    }
}

/**
 * ----------------------------------------------------------------------------
 */

group 'com.bcd'
version '1.0'
apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'idea'
//加入maven发布依赖
apply plugin: 'maven-publish'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenLocal()
    maven { url "${mavenRepoUrl}" }
    maven { url "https://jitpack.io" }
//        maven { url "${incarMavenRepoUrl}" }
}

//下载源码和文档
//gradle cleanIdea idea
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

//去除springboot默认的logback
configurations.all {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    exclude module: 'logback-classic'
    exclude module: 'logback-core'
}

dependencies {
    //springboot支持
    implementation("org.springframework.boot:spring-boot-starter")
    //springboot aop支持
    implementation("org.springframework.boot:spring-boot-starter-aop")
    //springboot web支持
    implementation("org.springframework.boot:spring-boot-starter-web")
    //springboot log4j2支持
    implementation('org.springframework.boot:spring-boot-starter-log4j2')
    //disruptor(log4j2异步日志需要用到)
    implementation group: 'com.lmax', name: 'disruptor', version: "${disruptorVersion}"
    //springboot test支持
//    api("org.springframework.boot:spring-boot-starter-test")
    //springboot websocket支持
    implementation("org.springframework.boot:spring-boot-starter-websocket")
    //springboot redis支持
    //lettuce异步客户端(默认使用lettuce,必须手动引用apache commons-pool2)
    implementation("org.springframework.boot:spring-boot-starter-data-redis")
    implementation("org.apache.commons:commons-pool2:${commonsPool2}")
    //springboot validation支持
    implementation("org.springframework.boot:spring-boot-starter-validation")

    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.0.0'


    //shiro权限框架集成
    implementation("org.apache.shiro:shiro-spring:${shiroVersion}")
    implementation("org.apache.shiro:shiro-ehcache:${shiroVersion}")

    // https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-ui
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: "${springdocVersion}"

    // https://mvnrepository.com/artifact/com.github.ben-manes.caffeine/caffeine
    implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: "${caffeineVersion}"

    // https://mvnrepository.com/artifact/com.squareup.retrofit2/converter-jackson
    implementation group: 'com.squareup.retrofit2', name: 'converter-jackson', version: "${retrofitJacksonVersion}"

    //springboot mongodb支持
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")

    // https://mvnrepository.com/artifact/org.freemarker/freemarker
    implementation group: 'org.freemarker', name: 'freemarker', version: "${freemarkerVersion}"

    //springboot jpa支持
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    //springboot jdbc支持
    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    //mysql驱动包
    runtimeOnly "mysql:mysql-connector-java:${mysqlVersion}"

    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    runtimeOnly group: 'org.postgresql', name: 'postgresql', version: "${pgsqlVersion}"

    implementation("com.github.jsqlparser:jsqlparser:${jsqlparserVersion}")

    // https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter
    implementation group: 'com.alibaba', name: 'druid-spring-boot-starter', version: "${druidVersion}"

    //spring kafka支持
    implementation("org.springframework.kafka:spring-kafka:${kafkaVersion}")
    //邮件支持
    implementation("org.springframework.boot:spring-boot-starter-mail")

    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "${lombokVersion}"

}

//生成jar时打包源码
task sourceJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    classifier "sources"
}

jar {
    enabled = true
}

//发布到本地MAVEN仓库使用 gradle PublishToMavenLocal
//发布到远程MAVEN仓库使用 gradle publishMavenPublicationToMavenRepository
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact(sourceJar)
        }
    }
    repositories {
        maven {
            url 'https://repository.incarcloud.com/content/repositories/snapshots/'
            credentials {
                username 'deployment'
                password 'deploy123456'
            }
        }
    }
}

/**
 * SpringBoot 2开始,使用gradle bootJar进行打包,并要配置入口类
 */
bootJar {
    manifest {
        attributes 'Start-Class': 'com.bcd.Application'
    }
}


/**
 * ----------------------------------------------------------------------------
 */
bootRun {
    /**
     * 启动时候带入jvm的参数;如下(启动jvisualvm监控)
     * nohup gradle bootRun -PjvmArgs="-Djava.rmi.server.hostname=172.16.24.36 -Dcom.sun.management.jmxremote.port=10001 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true" &
     */
    List args = new ArrayList<>();
    if (project.hasProperty('jvmArgs')) {
        args.addAll(project.jvmArgs.split("\\s+") as List)
    }
    //开启缓存行补齐
    args.add('-XX:-RestrictContended')
    args.add('-Dfile.encoding=UTF-8')
    //log4j2全局异步日志
    args.add('-DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector')
    jvmArgs(args)
}


/**
 * ----------------------------------------------------------------------------
 */

apply plugin: 'org.flywaydb.flyway'

flyway {
    def subLocations = []
    //mysql
    url = 'jdbc:mysql://127.0.0.1:3306/msbf?characterEncoding=utf8&useSSL=false&rewriteBatchedStatements=true&serverTimezone=UTC'
    user = 'root'
    password = '123456'
    for (project in subprojects) {
        subLocations.add('filesystem:' + project.sourceSets.main.resources.srcDirs.iterator().next().getPath() + '/db/migration/mysql')
    }
    //pgsql
//    url = 'jdbc:postgresql://127.0.0.1:5432/msbf'
//    user = 'root'
//    password = '123456'
//    for(project in subprojects){
//        subLocations.add('filesystem:'+project.sourceSets.main.resources.srcDirs.iterator().next().getPath()+'/db/migration/pgsql')
//    }

    flyway.locations = subLocations
}

flywayMigrate {
    //是否允许无序的迁移
    outOfOrder = true
}

/**
 * ----------------------------------------------------------------------------
 */
