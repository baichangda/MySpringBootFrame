buildscript {
    ext {
        aliyunPublic = 'https://maven.aliyun.com/repository/public/'
        aliyunGoogle = 'https://maven.aliyun.com/repository/google'
        aliyunGradlePlugin = 'https://maven.aliyun.com/repository/gradle-plugin'
        aliyunSpring = 'https://maven.aliyun.com/repository/spring'
        aliyunSpringPlugin = 'https://maven.aliyun.com/repository/spring-plugin'
        incarMavenRepoUrl = 'https://repository.incarcloud.com/content/repositories/snapshots/'
    }

    repositories {
        mavenLocal()
        maven { url "${aliyunPublic}" }
        maven { url "${aliyunGradlePlugin}" }
        maven { url "${aliyunSpringPlugin}" }
        mavenCentral()
    }
}

plugins {
    id 'java-library'
    id 'java'
    id 'idea'
    id 'maven-publish'
    id "org.flywaydb.flyway" version "8.+"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id 'org.springframework.boot' version "2.+"
}


/**
 * ----------------------------------------------------------------------------
 */
group 'com.bcd'
version '1.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    maven { url "${aliyunPublic}" }
    maven { url "${aliyunGoogle}" }
    maven { url "${aliyunSpring}" }
    mavenCentral()
//    maven {
//        url "${incarMavenRepoUrl}"
//        //允许http依赖库
//        allowInsecureProtocol = true
//    }
}

//下载源码和文档
//gradle cleanIdea idea
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

//去除springboot默认的logback
configurations.all {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    exclude module: 'logback-classic'
    exclude module: 'logback-core'
}

dependencies {
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: "+"
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: "+"

    // https://mvnrepository.com/artifact/com.google.code.findbugs/annotations
    implementation group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1'

    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation group: 'com.google.guava', name: 'guava', version: "+"

    //springboot支持
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-configuration-processor")
    //springboot cache支持
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
    //springboot aop支持
    implementation("org.springframework.boot:spring-boot-starter-aop")
    //springboot web支持
    implementation("org.springframework.boot:spring-boot-starter-web")


    //springboot log4j2支持
    implementation('org.springframework.boot:spring-boot-starter-log4j2')
    //disruptor(log4j2异步日志需要用到)
    implementation group: 'com.lmax', name: 'disruptor', version: "3.+"

    //springboot jpa支持
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    //springboot jdbc支持
    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    implementation("com.github.jsqlparser:jsqlparser:+")
    //邮件支持
    implementation("org.springframework.boot:spring-boot-starter-mail")

    //springboot redis支持
    //lettuce异步客户端(默认使用lettuce,必须手动引用apache commons-pool2)
    implementation("org.springframework.boot:spring-boot-starter-data-redis")
    implementation("org.apache.commons:commons-pool2:+")
    //springboot validation支持
    implementation("org.springframework.boot:spring-boot-starter-validation")

    //springboot mongodb支持
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")

    //spring kafka支持
    implementation("org.springframework.kafka:spring-kafka:+")

    // https://mvnrepository.com/artifact/com.alibaba/easyexcel
    implementation(group: 'com.alibaba', name: 'easyexcel', version: "+")
//            {
//        exclude group: 'org.apache.poi' ,module: 'poi-ooxml-schemas'
//    }
    // https://mvnrepository.com/artifact/org.apache.xmlbeans/xmlbeans
//    implementation group: 'org.apache.xmlbeans', name: 'xmlbeans', version: '5.0.3'


    // https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-ui
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: "+"

    // https://mvnrepository.com/artifact/com.github.ben-manes.caffeine/caffeine
    implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: "2.+"

    // https://mvnrepository.com/artifact/org.freemarker/freemarker
    implementation group: 'org.freemarker', name: 'freemarker', version: "+"


    //mysql驱动包
    runtimeOnly "mysql:mysql-connector-java:8.+"
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    runtimeOnly group: 'org.postgresql', name: 'postgresql', version: "42.+"


    testImplementation("org.springframework.boot:spring-boot-starter-test")

    // https://mvnrepository.com/artifact/cn.dev33/sa-token-spring-boot-starter
    implementation group: 'cn.dev33', name: 'sa-token-spring-boot-starter', version: "+"
    implementation group: 'cn.dev33', name: 'sa-token-dao-redis-jackson', version: "+"

    // https://mvnrepository.com/artifact/io.netty/netty-buffer
    implementation group: 'io.netty', name: 'netty-buffer', version: "4.+"

    // define a BOM and its version
    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.10.0"))
    // define any required OkHttp artifacts without version
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")
}

//把classpath添加到module path中、建立module-info.java后使用
//compileJava {
//    doFirst {
//        options.compilerArgs += [
//                '--module-path', classpath.asPath
//        ]
//        classpath = files()
//    }
//}

/**
 * SpringBoot 2开始,使用gradle bootJar进行打包,并要配置入口类
 */
bootJar {
    exclude "**/*-dev.yml"
    exclude "**/*-test.yml"
    manifest {
        attributes 'Start-Class': 'com.bcd.Application'
    }
}

//生成jar时打包源码
task sourceJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    archiveClassifier.set("sources")
}

/**
 * ----------------------------------------------------------------------------
 */
bootRun {
    /**
     * 启动时候带入jvm的参数;如下(启动jvisualvm监控)
     * nohup gradle bootRun -PjvmArgs="-Djava.rmi.server.hostname=172.16.24.36 -Dcom.sun.management.jmxremote.port=10001 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true" &
     */
    if (project.hasProperty('jvmArgs')) {
        jvmArgs(project.jvmArgs.split("\\s+") as List)
    }
    //开启缓存行补齐
    jvmArgs('-XX:-RestrictContended')
    jvmArgs('-Dfile.encoding=UTF-8')
    jvmArgs('-DLog4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector')
}


/**
 * ----------------------------------------------------------------------------
 */

flyway {
    def subLocations = []
    //mysql
    url = 'jdbc:mysql://127.0.0.1:3306/msbf?characterEncoding=utf8&useSSL=false&rewriteBatchedStatements=true&serverTimezone=UTC'
    user = 'root'
    password = '123456'
    subLocations.add('filesystem:' + project.sourceSets.main.resources.srcDirs.iterator().next().getPath() + '/db/migration/mysql')
    //pgsql
//    url = 'jdbc:postgresql://127.0.0.1:5432/msbf'
//    user = 'root'
//    password = '123456'
//    subLocations.add('filesystem:'+project.sourceSets.main.resources.srcDirs.iterator().next().getPath()+'/db/migration/pgsql')

    flyway.locations = subLocations

    //是否允许无序的迁移
    outOfOrder = true
}
/**
 * ----------------------------------------------------------------------------
 */
