package ${packagePre}.controller;

import com.bcd.base.condition.Condition;
import com.bcd.base.condition.impl.*;
import com.bcd.base.controller.BaseController;
import com.bcd.base.message.JsonMessage;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.*;
import java.util.Date;
import java.util.List;
import org.springframework.validation.annotation.Validated;
import ${packagePre}.bean.${moduleName?cap_first}Bean;
import ${packagePre}.service.${moduleName?cap_first}Service;

@SuppressWarnings(value = "unchecked")
@RestController
@RequestMapping("/api${requestMappingPre}/${moduleName?uncap_first}")
@Tag(name = "${moduleNameCN}-${moduleName?cap_first}Controller")
public class ${moduleName?cap_first}Controller extends BaseController {

    @Autowired
    private ${moduleName?cap_first}Service ${moduleName?uncap_first}Service;

    /**
     * 查询${moduleNameCN}列表
     * @return
     */
    @RequestMapping(value = "/list", method = RequestMethod.GET)
    @Operation(summary="查询${moduleNameCN}列表")
    @ApiResponse(responseCode = "200",description = "${moduleNameCN}列表")
    public JsonMessage<List<${moduleName?cap_first}Bean>> list(
        <#list fieldList as field>
          <#if field.type == "Date">
        @Parameter(description = "${field.comment}开始",schema = @Schema(type = "integer")) @RequestParam(required = false) Date ${field.name}Begin,
        @Parameter(description = "${field.comment}结束",schema = @Schema(type = "integer")) @RequestParam(required = false) Date ${field.name}End<#if field_has_next>,</#if>
          <#else>
        @Parameter(description = "${field.comment}") @RequestParam(required = false) ${field.type} ${field.name}<#if field_has_next>,</#if>
          </#if>
        </#list>
    ){
        Condition condition= Condition.and(
        <#list fieldList as field>
           <#if field.type == "Date">
           DateCondition.BETWEEN("${field.name}",${field.name}Begin,${field.name}End)<#if field_has_next>,</#if>
           <#elseif field.type == "String">
           StringCondition.EQUAL("${field.name}",${field.name})<#if field_has_next>,</#if>
           <#elseif field.type == "Long"||field.type == "Integer"||field.type == "Short"||field.type == "Byte"||field.type=="BigDecimal">
           NumberCondition.EQUAL("${field.name}",${field.name})<#if field_has_next>,</#if>
           <#elseif field.type == "Boolean">
           BooleanCondition.NULL("${field.name}",${field.name})<#if field_has_next>,</#if>
           </#if>
        </#list>
        );
        return JsonMessage.success(${moduleName?uncap_first}Service.list(condition));
    }

    /**
     * 查询${moduleNameCN}分页
     * @return
     */
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    @Operation(summary="查询${moduleNameCN}分页")
    @ApiResponse(responseCode = "200",description = "${moduleNameCN}分页结果集")
    public JsonMessage<Page<${moduleName?cap_first}Bean>> page(
        <#list fieldList as field>
          <#if field.type == "Date">
        @Parameter(description = "${field.comment}开始",schema = @Schema(type = "integer")) @RequestParam(required = false) Date ${field.name}Begin,
        @Parameter(description = "${field.comment}结束",schema = @Schema(type = "integer")) @RequestParam(required = false) Date ${field.name}End,
          <#else>
        @Parameter(description = "${field.comment}") @RequestParam(required = false) ${field.type} ${field.name},
          </#if>
        </#list>
        @Parameter(description = "分页参数(页数)")  @RequestParam(required = false,defaultValue = "1")Integer pageNum,
        @Parameter(description = "分页参数(页大小)") @RequestParam(required = false,defaultValue = "20") Integer pageSize
    ){
        Condition condition= Condition.and(
        <#list fieldList as field>
           <#if field.type == "Date">
           DateCondition.BETWEEN("${field.name}",${field.name}Begin,${field.name}End)<#if field_has_next>,</#if>
           <#elseif field.type == "String">
           StringCondition.EQUAL("${field.name}",${field.name})<#if field_has_next>,</#if>
           <#elseif field.type == "Long"||field.type == "Integer"||field.type == "Short"||field.type == "Byte"||field.type=="BigDecimal">
           NumberCondition.EQUAL("${field.name}",${field.name})<#if field_has_next>,</#if>
           <#elseif field.type == "Boolean">
           BooleanCondition.NULL("${field.name}",${field.name})<#if field_has_next>,</#if>
           </#if>
        </#list>
        );
        return JsonMessage.success(${moduleName?uncap_first}Service.page(condition,PageRequest.of(pageNum-1,pageSize)));
    }

    /**
     * 保存${moduleNameCN}
     * @param ${moduleName?uncap_first}
     * @return
     */
    @RequestMapping(value = "/save",method = RequestMethod.POST)
    @Operation(summary = "保存${moduleNameCN}")
    @ApiResponse(responseCode = "200",description = "保存结果")
    public JsonMessage save(@io.swagger.v3.oas.annotations.parameters.RequestBody(description = "${moduleNameCN}实体") <#if validateSaveParam>@Validated</#if> @RequestBody ${moduleName?cap_first}Bean ${moduleName?uncap_first}){
        ${moduleName?uncap_first}Service.save(${moduleName?uncap_first});
        return JsonMessage.success();
    }


    /**
     * 删除${moduleNameCN}
     * @param ${pkFieldName}s
     * @return
     */
    @RequestMapping(value = "/delete",method = RequestMethod.DELETE)
    @Operation(summary = "删除${moduleNameCN}")
    @ApiResponse(responseCode = "200",description = "删除结果")
    public JsonMessage delete(@Parameter(description = "${moduleNameCN}${pkFieldName}数组") @RequestParam String[] ${pkFieldName}s){
        ${moduleName?uncap_first}Service.delete(${pkFieldName}s);
        return JsonMessage.success();
    }

}
